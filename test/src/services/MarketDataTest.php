<?php

namespace Test\App\services;

use App\extensions\BotExchange;
use App\models\TimeFrame;
use App\services\MarketData;
use DateTime;
use DateTimeZone;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2022-09-03 at 13:26:09.
 */
class MarketDataTest extends TestCase {

    /**
     * @var MarketData
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new MarketData(symbol: "SOL/USDT", timeframe: new TimeFrame("30m"), exchange: new BotExchange());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {

    }

    /**
     * @covers App\services\MarketData::getMarketData
     * @todo   Implement testGetMarketData().
     * @skip
     */
    public function testGetMarketData() {

        $md = $this->object->GetMarketData();
        $this->assertEquals("App\models\OHLCVCollection", get_class($md));
        $this->assertEquals(500, $md->getCount());
    }

    public function testGetHistoricalMarketData() {

        $md         = $this->object->getHistoricalMarketData(since: new DateTime("2021-12-31 00:00:00", new DateTimeZone('UTC')), limit: 500);
        $this->assertEquals("App\models\OHLCVCollection", get_class($md));
        $this->assertEquals(500, $md->getCount());
        $this->assertEquals("2021-12-31 00:00:00", $md->getFormatedTimeStamp(499));
        $this->assertEquals("2021-12-20 14:30:00", $md->getFormatedTimeStamp(0));
        $timestamps = $md->getTimestamps();
        $ini        = $timestamps[0];
        $end        = end($timestamps);
        $this->assertEquals(1640010600000, $ini);
        $this->assertEquals(1640908800000, $end);
    }

    public function testGetHistoricalMarketData2() {

        $md         = $this->object->getHistoricalMarketData(since: new DateTime("2022-03-01 14:00:00", new DateTimeZone('UTC')), limit: 500);
        $this->assertEquals("App\models\OHLCVCollection", get_class($md));
        $this->assertEquals(500, $md->getCount());
        $this->assertEquals("2022-03-01 14:00:00", $md->getFormatedTimeStamp(499));
        $this->assertEquals("2022-02-19 04:30:00", $md->getFormatedTimeStamp(0));
        $timestamps = $md->getTimestamps();
        $ini        = $timestamps[0];
        $end        = end($timestamps);
        $this->assertEquals(1645245000000, $ini);
        $this->assertEquals(1646143200000, $end);
    }

}
