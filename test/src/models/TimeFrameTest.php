<?php

namespace Test\App\models;

use App\models\TimeFrame;
use App\extensions\BotException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2022-09-01 at 01:50:52.
 */
class TimeFrameTest extends \PHPUnit\Framework\TestCase {

    public function testIfNotAValidTimeFrame() {
        $this->expectException(BotException::class);
        new TimeFrame("3ff");
    }

    public function testValidTimeFrame1minute() {
        $tf = new TimeFrame("1m");
        $this->assertEquals("1m", $tf);
    }

    public function testValidTimeFrame30minutes() {
        $tf = new TimeFrame("30m");
        $this->assertEquals("30m", $tf);
    }

    public function testValidTimeFrame1hour() {
        $tf = new TimeFrame("1h");
        $this->assertEquals("1h", $tf);
    }

    public function testValidTimeFrame1day() {
        $tf = new TimeFrame("1d");
        $this->assertEquals("1d", $tf);
    }

    public function testValidTimeFrame1Week() {
        $tf = new TimeFrame("1W");
        $this->assertEquals("1W", $tf);
    }

    public function testValidTimeFrame1Month() {
        $tf = new TimeFrame("1M");
        $this->assertEquals("1M", $tf);
    }

    public function testMonthGetTimeUnit() {
        $tf = new TimeFrame("1M");
        $this->assertEquals("month", $tf->getTimeUnit());
    }

    public function testWeekGetTimeUnit() {
        $tf = new TimeFrame("1W");
        $this->assertEquals("week", $tf->getTimeUnit());
    }

    public function testDayhGetTimeUnit() {
        $tf = new TimeFrame("1d");
        $this->assertEquals("day", $tf->getTimeUnit());
    }

    public function testHourGetTimeUnit() {
        $tf = new TimeFrame("1h");
        $this->assertEquals("hour", $tf->getTimeUnit());
    }

    public function testMinuteGetTimeUnit() {
        $tf = new TimeFrame("1m");
        $this->assertEquals("minute", $tf->getTimeUnit());
    }

    public function testGetTimeQuantity5m() {
        $tf = new TimeFrame("5m");
        $this->assertEquals(5, $tf->getTimeQuantity());
    }

    public function testGetTimeQuantity30m() {
        $tf = new TimeFrame("30m");
        $this->assertEquals(30, $tf->getTimeQuantity());
    }

    public function testGetTimeQuantity15m() {
        $tf = new TimeFrame("15m");
        $this->assertEquals(15, $tf->getTimeQuantity());
    }

    public function testGetTimeQuantity1d() {
        $tf = new TimeFrame("1d");
        $this->assertEquals(1, $tf->getTimeQuantity());
    }

}
